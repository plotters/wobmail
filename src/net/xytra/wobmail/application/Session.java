package net.xytra.wobmail.application;
// Generated by the WOLips Templateengine Plug-in at Apr 18, 2007 9:01:26 PM

import java.text.DateFormat;
import java.text.SimpleDateFormat;

import net.xytra.wobmail.export.ExportVisitor;
import net.xytra.wobmail.mailconn.folder.WobmailFolder;
import net.xytra.wobmail.mailconn.manager.Pop3MailSessionManager;
import net.xytra.wobmail.mailconn.session.MailSession;
import net.xytra.wobmail.util.LocaleUtils;

import com.webobjects.foundation.NSDictionary;
import com.webobjects.foundation.NSMutableArray;

import er.extensions.appserver.ERXSession;
import er.extensions.logging.ERXLogger;

public class Session extends ERXSession
{
	private String username;

	private NSMutableArray<ExportVisitor> downloadableObjects = new NSMutableArray<ExportVisitor>();

	private WobmailFolder currentFolder = null;

	private MailSession mailSession;

	// To present dates
	private DateFormat localizedDateTimeFormat;

	// Persistent parameters for display purposes
	private int selectedPageIndex = 0;
	private int selectedNumberPerPage = 50;

	public Session() {
		super();

		ERXLogger.log.debug("Creating session " + sessionID());
	}

	@Override
	public void terminate()
	{
		Pop3MailSessionManager.instance().deregisterEntry(sessionID());
		super.terminate();
	}

	// Localization
	public DateFormat localizedDateTimeFormat() {
		return (localizedDateTimeFormat);
	}

	@Override
	public void setLanguage(String language) {
		super.setLanguage(language);

		// Update date/time format
		String localizedDateTimeFormatString = localizer().localizedStringForKey("Session.dateTimeFormatString");

		if (localizedDateTimeFormatString != null) {
			localizedDateTimeFormat = new SimpleDateFormat(localizedDateTimeFormatString, LocaleUtils.localeForLocaleName(language));	
		} else {
			ERXLogger.log.debug("Session.dateTimeFormatString not specified for session's locale, using default for default locale");
			localizedDateTimeFormat = DateFormat.getDateTimeInstance();
		}
	}

	// Mail session
	public MailSession getMailSession() {
		return (mailSession);
	}

	public void setMailSession(MailSession ms) {
		this.mailSession = ms;
	}

	// Current mail viewing parameters
	/**
	 * @return current folder, and if none currently set, Inbox folder
	 */
	public WobmailFolder getCurrentFolder() {
		if (currentFolder == null) {
			currentFolder = getMailSession().getInboxFolder();
		}

		return (currentFolder);
	}

	/**
	 * Set the new current folder.
	 *
	 * @param newFolder folder to set as current folder.
	 */
	public void setCurrentFolder(WobmailFolder newFolder) {
		if (newFolder == null) {
			throw (new NullPointerException());
		}

		currentFolder = newFolder;
	}

	/**
	 * @return the batch size, number of messages per page, when listing the message in a folder.
	 */
	public int getSelectedNumberPerPage() {
		return (selectedNumberPerPage);
	}

	/**
	 * Set the list page batch size when listing the message in a folder.
	 *
	 * @param newNumberPerPage new number of messages that should be shown per page.
	 */
	public void setSelectedNumberPerPage(int newNumberPerPage) {
		selectedNumberPerPage = newNumberPerPage;
	}

	/**
	 * @return the index of the currently viewed page of messages.
	 */
	public int getSelectedPageIndex() {
		return (selectedPageIndex);
	}

	/**
	 * Set the new currently viewed page of messages by its index.
	 *
	 * @param newPageIndex index of new page.
	 */
	public void setSelectedPageIndex(int newPageIndex) {
		selectedPageIndex = newPageIndex;
	}

	// Username
	public String username() {
		return (this.username);
	}

	public void setUsername(String username) {
		this.username = username;
	}

	// Downloadable objects
	/**
	 * @param index
	 * @return an ExportVisitor representing the downloadable object at index
	 */
	public ExportVisitor getDownloadableObject(int index) {
		return ((ExportVisitor) downloadableObjects.objectAtIndex(index));
	}

	public int registerDownloadbleObject(ExportVisitor object)
	{
		int index;

		synchronized (this.downloadableObjects)
		{
			this.downloadableObjects.addObject(object);
			index = this.downloadableObjects.count() - 1;
		}

		return (index);
	}

	public void clearDownloadableObjects() {
		downloadableObjects.removeAllObjects();
	}

//	public String urlForDownloadableObject(int index)
//	{
//		return (urlForExportableObject(index, "downloadObject"));
//	}

	public String urlForViewableObject(int index)
	{
		return (urlForExportableObject(index, "viewObject"));
	}

	protected String urlForExportableObject(int index, String directActionName)
	{
		return (context().directActionURLForActionNamed(
				directActionName,
				new NSDictionary<String, Object>(
						new Object[] { sessionID(), Integer.toString(index) },
						new String[] { "wosid", "id" })));
	}

	public String getCurrentSortField() {
		return (getCurrentFolder().getSortKey());
	}

	public boolean getCurrentSortReverse() {
		return (getCurrentFolder().isReverseSort());
	}

}
