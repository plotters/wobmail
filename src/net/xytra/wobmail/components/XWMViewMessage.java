package net.xytra.wobmail.components;
// Generated by the WOLips Templateengine Plug-in at Apr 21, 2007 9:51:26 PM

import java.io.IOException;

import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.internet.MimeMessage;

import net.xytra.wobmail.application.Session;
import net.xytra.wobmail.export.ExportVisitor;
import net.xytra.wobmail.mailconn.message.WobmailMessage;
import net.xytra.wobmail.util.XWMUtils;

import com.webobjects.appserver.WOContext;
import com.webobjects.foundation.NSData;
import com.webobjects.foundation.NSTimestamp;

import er.extensions.eof.ERXConstant;

public class XWMViewMessage extends XWMAbstractPage
{
	private Integer messageIndex;
	private WobmailMessage message;

	public XWMViewMessage(WOContext context)
	{
		super(context);
		session().clearDownloadableObjects();
	}

	// Data
	/**
	 * @return true if link for next message in same folder should be shown, false otherwise.
	 * @throws MessagingException
	 */
	public boolean showNextMessageLink() throws MessagingException {
		int numMessagesInFolder = session().getCurrentFolder().getNumberMessages();

		return (getMessageIndex() < numMessagesInFolder-1);
	}

	/**
	 * @return true if link for previous message in same folder should be shown, false otherwise.
	 */
	public boolean showPreviousMessageLink() {
		return (getMessageIndex() > 0);
	}

	protected Message getMessage() throws MessagingException {
		return (getMessageRow().getMessage());
	}

	/**
	 * @return the MessageRow corresponding to the displayed Message.
	 * @throws MessagingException 
	 */
	public WobmailMessage getMessageRow() {
		if (message == null) {
			System.err.println("messageIndex="+messageIndex);
			message = session().getCurrentFolder().getMessageByIndex(getMessageIndex());

			// Ensure connection is still open and folder too:
			getMailSession().keepConnectionOpenForMessage(message);
		}

		return (message);
	}

	/**
	 * @return the index of message as passed in earlier.
	 */
	public int getMessageIndex() {
		return (messageIndex.intValue());
	}

	public void setMessageIndex(int index) {
		messageIndex = ERXConstant.integerForInt(index);
	}

	public int getNextMessageIndex() {
		return (getMessageIndex() + 1);
	}

	public int getPreviousMessageIndex() {
		return (getMessageIndex() - 1);
	}

	public String defaultMessageContent() throws MessagingException, IOException
	{
		return (XWMUtils.defaultStringContentForPart(getMessage()));
	}

	public String messageSender() throws MessagingException {
		return (XWMUtils.fromAddressesAsStringForMessage(getMessage()));
	}

	public String messageToRecipient() throws MessagingException {
		return (XWMUtils.toAddressesAsStringForMessage(getMessage()));
	}

	public String messageSubject() throws MessagingException {
		return (getMessageRow().getSubject());
	}

	public String presentableDateSent() throws MessagingException {
		return (session().localizedDateTimeFormat().format(getMessageRow().getDateSent()));
	}

	public String viewSourceUrl()
	{
		ExportVisitor ev = new ExportVisitor()
		{
			public NSData getFileContent()
			{
				try
				{
					return (XWMUtils.fullMimeMessageSource((MimeMessage)getMessage()));
				}
				catch (IOException e)
				{
					e.printStackTrace();
				}
				catch (MessagingException e)
				{
					e.printStackTrace();
				}
				return (NSData.EmptyData);
			}

			public String getFileName()
			{
				return ("email-" + new NSTimestamp().getTime() + ".txt");
			}

			public String getFileType()
			{
				return (XWMUtils.CONTENT_TYPE_TEXT_PLAIN);
			}
		};

		int index = ((Session)session()).registerDownloadbleObject(ev);
		return (((Session)session()).urlForViewableObject(index));
	}

}
